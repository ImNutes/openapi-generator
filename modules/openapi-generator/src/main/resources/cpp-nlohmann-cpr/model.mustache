#pragma once

#include <nlohmann/json.hpp>
#include <string>
#include <vector>
#include <map>
#include <optional>

{{#models}}
{{#model}}
struct {{classname}} {
{{#vars}}
    {{#required}}
    {{{datatype}}} {{name}};
    {{/required}}
    {{^required}}
    std::optional<{{{datatype}}}> {{name}};
    {{/required}}
{{/vars}}
};

//nlohmann gaming
inline void to_json(nlohmann::json &j, const {{classname}} &o) {
    {{#hasRequired}}
    j = nlohmann::json{
        {{#vars}}
            {{#required}}
                {"{{baseName}}", o.{{name}} }{{^-last}},{{/-last}}
            {{/required}}
        {{/vars}}
    };
    {{/hasRequired}}
    {{#vars}}
        {{^required}}
            if(o.{{name}}.has_value()) j[ "{{baseName}}" ] = o.{{name}}.value();
        {{/required}}
    {{/vars}}
}

inline void from_json(const nlohmann::json &j, const {{classname}} &o) {
    {{#vars}}
        {{#required}}
            j.at("{{baseName}}").get_to(o.{{name}});
        {{/required}}
        {{^required}}
            if(j.contains("{{baseName}}")) j.at("{{baseName}}").get_to(o.{{name}});
        {{/required}}
    {{/vars}}
}

{{/model}}
{{/models}}
